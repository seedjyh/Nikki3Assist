[TYPE DEFINE]
Integer     :=  [1-9][0-9]*
String      :=  "XXXX"
ItemNamePair:=  (String|String)
ItemAmount   :=  ItemNamePair*Integer
Formular    :=  \[ItemAmount[+ItemAmount]*\]

ADD-ITEM-TYPE: TYPE="String"
ADD-ITEM-INFO: NAME="ItemNamePair", ID_IN_GAME="Integer"
SET-ITEM-PRICE: ITEM="ItemNamePair", PRICE="ItemAmount"
SET-ITEM-STOCK: ITEM="ItemNamePair", COUNT="Integer"
ADD-CREATING-RULE: PRODUCT="ItemNamePair", RAW_MATERIALS="Formular"
ADD-DYEING-RULE: PRODUCT="ItemNamePair", RAW_MATERIALS="Formular"
ADD-TASK: TYPE="String", CHAPTER="String", STAGE="String"
SET-TASK-REWARD: TYPE="String", CHAPTER="String", STAGE="String", REWARDS="ItemNamePair"
SHOW-ITEM-INFO: ITEM="ItemNamePair"
SHOW-ITEM-ACQUISITION-MEAN: TARGET="Formular"

======================

MMLParser("ADD-CREATING-RULE")("PRODUCT", "ItemNamePairParser")("RAW-MATERIALS", "FormularParser") // The second string is argument-type, which should be save in a const std::string.  
           MMLParser::MMLParser(const char command_name[])
MMLParser& MMLParser::operator(const char kArgumentName[], ArgumentParser)
    return *this
bool MMLParser::CheckName(const char kMMLText[])
MMLCommandPtr MMLParser::Parse(const char kMMLText)

typedef std::list<MMLParser> MMLParserList;

<MMLArgumentSet>
    int MMLArgumentSet::GetInegerArguemnt(const std::string &kName)
    std::string MMLArgumentSet::GetStringArguemnt(const std::string &kName)
    ItemNamePair MMLArgumentSet::GetItemNamePair(const std::string &kName)
    ItemAmount MMLArgumentSet::GetItemAmount(const std::string &kName)
    Formular MMLArgumentSet::GetFormular(const std::string &kName)
    If no such argument with same name and type, throw NoSuchArgumentException(argument_name, argument_type)